// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: message.capnp

#ifndef CAPNP_INCLUDED_b1ed434000ad8669_
#define CAPNP_INCLUDED_b1ed434000ad8669_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ef7070be7d831ef2);
enum class CommandType_ef7070be7d831ef2: uint16_t {
  HEARTBEAT,
  CREATE_C_F,
  DELETE_C_F,
  CREATE_C_F_INDEX,
  DELETE_C_F_INDEX,
  LOOKUP_ONE_C_F,
  OPEN_C_F_CURSOR,
  NEXT_C_F_CURSOR,
  CLOSE_C_F_CURSOR,
  BULK_LOAD,
};
CAPNP_DECLARE_ENUM(CommandType, ef7070be7d831ef2);
CAPNP_DECLARE_SCHEMA(d28ac5c0bc318a89);
enum class StatusId_d28ac5c0bc318a89: uint16_t {
  OK,
  ERROR,
};
CAPNP_DECLARE_ENUM(StatusId, d28ac5c0bc318a89);
CAPNP_DECLARE_SCHEMA(cc1a40b39b640024);
CAPNP_DECLARE_SCHEMA(8f7857d38e065fcb);
enum class MessageResponseType_8f7857d38e065fcb: uint16_t {
  SYNC,
  ASYNC,
};
CAPNP_DECLARE_ENUM(MessageResponseType, 8f7857d38e065fcb);
CAPNP_DECLARE_SCHEMA(c54314eb24a59cf0);
CAPNP_DECLARE_SCHEMA(9138c97f6ea04c43);
CAPNP_DECLARE_SCHEMA(f70262c0d4b62be5);
CAPNP_DECLARE_SCHEMA(bcfe88072718d3d7);
CAPNP_DECLARE_SCHEMA(fe522405d8504a40);

}  // namespace schemas
}  // namespace capnp

namespace transport {

typedef ::capnp::schemas::CommandType_ef7070be7d831ef2 CommandType;

typedef ::capnp::schemas::StatusId_d28ac5c0bc318a89 StatusId;

struct StatusMessage {
  StatusMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc1a40b39b640024, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::MessageResponseType_8f7857d38e065fcb MessageResponseType;

struct Parameter {
  Parameter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c54314eb24a59cf0, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Record {
  Record() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9138c97f6ea04c43, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MessageRequest {
  MessageRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f70262c0d4b62be5, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MessageResponse {
  MessageResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcfe88072718d3d7, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MessageResponseList {
  MessageResponseList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe522405d8504a40, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class StatusMessage::Reader {
public:
  typedef StatusMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::transport::StatusId getStatus() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StatusMessage::Builder {
public:
  typedef StatusMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::transport::StatusId getStatus();
  inline void setStatus( ::transport::StatusId value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StatusMessage::Pipeline {
public:
  typedef StatusMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Parameter::Reader {
public:
  typedef Parameter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Parameter::Builder {
public:
  typedef Parameter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Parameter::Pipeline {
public:
  typedef Parameter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Record::Reader {
public:
  typedef Record Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Data::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Data::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Record::Builder {
public:
  typedef Record Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Data::Builder getKey();
  inline void setKey( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownKey();

  inline bool hasValue();
  inline  ::capnp::Data::Builder getValue();
  inline void setValue( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Record::Pipeline {
public:
  typedef Record Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MessageRequest::Reader {
public:
  typedef MessageRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::transport::CommandType getCmd() const;

  inline bool hasArgs() const;
  inline  ::capnp::List< ::transport::Parameter>::Reader getArgs() const;

  inline  ::transport::MessageResponseType getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MessageRequest::Builder {
public:
  typedef MessageRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::transport::CommandType getCmd();
  inline void setCmd( ::transport::CommandType value);

  inline bool hasArgs();
  inline  ::capnp::List< ::transport::Parameter>::Builder getArgs();
  inline void setArgs( ::capnp::List< ::transport::Parameter>::Reader value);
  inline  ::capnp::List< ::transport::Parameter>::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::List< ::transport::Parameter>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::transport::Parameter>> disownArgs();

  inline  ::transport::MessageResponseType getType();
  inline void setType( ::transport::MessageResponseType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MessageRequest::Pipeline {
public:
  typedef MessageRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MessageResponse::Reader {
public:
  typedef MessageResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasStatus() const;
  inline  ::transport::StatusMessage::Reader getStatus() const;

  inline bool hasResult() const;
  inline  ::capnp::List< ::transport::Record>::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MessageResponse::Builder {
public:
  typedef MessageResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasStatus();
  inline  ::transport::StatusMessage::Builder getStatus();
  inline void setStatus( ::transport::StatusMessage::Reader value);
  inline  ::transport::StatusMessage::Builder initStatus();
  inline void adoptStatus(::capnp::Orphan< ::transport::StatusMessage>&& value);
  inline ::capnp::Orphan< ::transport::StatusMessage> disownStatus();

  inline bool hasResult();
  inline  ::capnp::List< ::transport::Record>::Builder getResult();
  inline void setResult( ::capnp::List< ::transport::Record>::Reader value);
  inline  ::capnp::List< ::transport::Record>::Builder initResult(unsigned int size);
  inline void adoptResult(::capnp::Orphan< ::capnp::List< ::transport::Record>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::transport::Record>> disownResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MessageResponse::Pipeline {
public:
  typedef MessageResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::transport::StatusMessage::Pipeline getStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MessageResponseList::Reader {
public:
  typedef MessageResponseList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasResponses() const;
  inline  ::capnp::List< ::transport::MessageResponse>::Reader getResponses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MessageResponseList::Builder {
public:
  typedef MessageResponseList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponses();
  inline  ::capnp::List< ::transport::MessageResponse>::Builder getResponses();
  inline void setResponses( ::capnp::List< ::transport::MessageResponse>::Reader value);
  inline  ::capnp::List< ::transport::MessageResponse>::Builder initResponses(unsigned int size);
  inline void adoptResponses(::capnp::Orphan< ::capnp::List< ::transport::MessageResponse>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::transport::MessageResponse>> disownResponses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MessageResponseList::Pipeline {
public:
  typedef MessageResponseList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::transport::StatusId StatusMessage::Reader::getStatus() const {
  return _reader.getDataField< ::transport::StatusId>(
      0 * ::capnp::ELEMENTS);
}

inline  ::transport::StatusId StatusMessage::Builder::getStatus() {
  return _builder.getDataField< ::transport::StatusId>(
      0 * ::capnp::ELEMENTS);
}
inline void StatusMessage::Builder::setStatus( ::transport::StatusId value) {
  _builder.setDataField< ::transport::StatusId>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StatusMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StatusMessage::Builder::hasMessage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StatusMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StatusMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StatusMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StatusMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StatusMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StatusMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Parameter::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Parameter::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Parameter::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Parameter::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Parameter::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Parameter::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Parameter::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Parameter::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Parameter::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Parameter::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Parameter::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Parameter::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Parameter::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Parameter::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Record::Reader::hasKey() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Record::Builder::hasKey() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Record::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Record::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Record::Builder::setKey( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Record::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Record::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Record::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Record::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Record::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Record::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Record::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Record::Builder::setValue( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Record::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Record::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Record::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t MessageRequest::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t MessageRequest::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MessageRequest::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::transport::CommandType MessageRequest::Reader::getCmd() const {
  return _reader.getDataField< ::transport::CommandType>(
      4 * ::capnp::ELEMENTS);
}

inline  ::transport::CommandType MessageRequest::Builder::getCmd() {
  return _builder.getDataField< ::transport::CommandType>(
      4 * ::capnp::ELEMENTS);
}
inline void MessageRequest::Builder::setCmd( ::transport::CommandType value) {
  _builder.setDataField< ::transport::CommandType>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool MessageRequest::Reader::hasArgs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MessageRequest::Builder::hasArgs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::transport::Parameter>::Reader MessageRequest::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::transport::Parameter>::Builder MessageRequest::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MessageRequest::Builder::setArgs( ::capnp::List< ::transport::Parameter>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::transport::Parameter>::Builder MessageRequest::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MessageRequest::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::List< ::transport::Parameter>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::transport::Parameter>> MessageRequest::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Parameter>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::transport::MessageResponseType MessageRequest::Reader::getType() const {
  return _reader.getDataField< ::transport::MessageResponseType>(
      5 * ::capnp::ELEMENTS);
}

inline  ::transport::MessageResponseType MessageRequest::Builder::getType() {
  return _builder.getDataField< ::transport::MessageResponseType>(
      5 * ::capnp::ELEMENTS);
}
inline void MessageRequest::Builder::setType( ::transport::MessageResponseType value) {
  _builder.setDataField< ::transport::MessageResponseType>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MessageResponse::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t MessageResponse::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MessageResponse::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool MessageResponse::Reader::hasStatus() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MessageResponse::Builder::hasStatus() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::transport::StatusMessage::Reader MessageResponse::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::transport::StatusMessage>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::transport::StatusMessage::Builder MessageResponse::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::transport::StatusMessage>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::transport::StatusMessage::Pipeline MessageResponse::Pipeline::getStatus() {
  return  ::transport::StatusMessage::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MessageResponse::Builder::setStatus( ::transport::StatusMessage::Reader value) {
  ::capnp::_::PointerHelpers< ::transport::StatusMessage>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::transport::StatusMessage::Builder MessageResponse::Builder::initStatus() {
  return ::capnp::_::PointerHelpers< ::transport::StatusMessage>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MessageResponse::Builder::adoptStatus(
    ::capnp::Orphan< ::transport::StatusMessage>&& value) {
  ::capnp::_::PointerHelpers< ::transport::StatusMessage>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::transport::StatusMessage> MessageResponse::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::transport::StatusMessage>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MessageResponse::Reader::hasResult() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MessageResponse::Builder::hasResult() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::transport::Record>::Reader MessageResponse::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::transport::Record>::Builder MessageResponse::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MessageResponse::Builder::setResult( ::capnp::List< ::transport::Record>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::transport::Record>::Builder MessageResponse::Builder::initResult(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MessageResponse::Builder::adoptResult(
    ::capnp::Orphan< ::capnp::List< ::transport::Record>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::transport::Record>> MessageResponse::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::Record>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool MessageResponseList::Reader::hasResponses() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MessageResponseList::Builder::hasResponses() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::transport::MessageResponse>::Reader MessageResponseList::Reader::getResponses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::transport::MessageResponse>::Builder MessageResponseList::Builder::getResponses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MessageResponseList::Builder::setResponses( ::capnp::List< ::transport::MessageResponse>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::transport::MessageResponse>::Builder MessageResponseList::Builder::initResponses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MessageResponseList::Builder::adoptResponses(
    ::capnp::Orphan< ::capnp::List< ::transport::MessageResponse>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::transport::MessageResponse>> MessageResponseList::Builder::disownResponses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::transport::MessageResponse>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_b1ed434000ad8669_
